pip install yfinance pandas numpy scikit-learn matplotlib

# Import libraries
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Step 1: Load AAPL stock data
df = yf.download('AAPL', start='2015-01-01', end='2023-12-31')
df = df[['Close']]

# Step 2: Add 'Prediction' column - the next day's closing price
df['Prediction'] = df['Close'].shift(-1)

# Step 3: Create features and labels
X = np.array(df[['Close']][:-1])      # all rows except last
y = np.array(df['Prediction'][:-1])   # all rows except last

# Step 4: Normalize features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Step 5: Split into train and test
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 6: Define ML models
models = {
    "Linear Regression": LinearRegression(),
    "Support Vector Regression": SVR(kernel='rbf'),
    "Decision Tree": DecisionTreeRegressor(),
    "Random Forest": RandomForestRegressor(n_estimators=100),
    "K-Nearest Neighbors": KNeighborsRegressor(n_neighbors=5)
}

# Step 7: Train, Predict and Evaluate each model
for name, model in models.items():
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)

    # Metrics
    mse = mean_squared_error(y_test, predictions)
    mae = mean_absolute_error(y_test, predictions)
    r2 = r2_score(y_test, predictions)

    print(f"\nðŸ”¹ {name}")
    print(f"   MSE : {mse:.4f}")
    print(f"   MAE : {mae:.4f}")
    print(f"   RÂ² Score: {r2:.4f}")

    # Plotting
    plt.figure(figsize=(10, 4))
    plt.plot(y_test[:100], label='Actual Price', color='blue')
    plt.plot(predictions[:100], label='Predicted Price', color='red')
    plt.title(f'{name} - AAPL Price Prediction')
    plt.xlabel('Test Data (First 100)')
    plt.ylabel('Price')
    plt.legend()
    plt.tight_layout()
    plt.show()
